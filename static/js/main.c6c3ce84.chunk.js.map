{"version":3,"sources":["Place.js","Placeset.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Place","id","street","city","className","src","alt","height","width","Placeset","placelists","map","user","i","key","address","Scroll","props","children","ErrorBoundary","state","ErrorState","this","setstate","Component","App","onSearchChange","event","setState","searcheditem","target","value","fetch","then","response","json","catch","console","log","filteredplaces","filter","placelist","toLowerCase","includes","length","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAYeA,EAXH,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,GAAGC,EAA4C,EAA5CA,OAAOC,EAAqC,EAArCA,KACvB,OACC,yBAAKC,UAAW,mDACf,yBAAKC,IAAG,+CAA0CJ,EAAG,IAA7C,YAAoDA,EAAG,IAAvD,mBAAsFK,IAAI,GAAGC,OAAO,MAAMC,MAAM,QACxH,6BACC,2BAAG,4CAA0BN,GAC7B,2BAAG,0CAAwBC,MCMhBM,EAXA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,WAChB,OACC,6BAECA,EAAWC,KAAI,SAACC,EAAKC,GACpB,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAGZ,GAAIS,EAAWG,GAAGZ,GAAIC,OAAuBQ,EAAWG,GAAGE,QAAQb,OAAkEC,KAAMO,EAAWG,GAAGE,QAAQZ,YCE5Ka,G,YAPF,SAACC,GACb,OACC,yBAAKhB,GAAG,UACDgB,EAAMC,YCaAC,E,YAhBd,WAAYF,GAAO,IAAD,8BACjB,4CAAMA,KACDG,MAAM,CACVC,YAAW,GAHK,E,gFAOjBC,KAAKC,SAAS,CAACF,YAAW,M,+BAG1B,OAAGC,KAAKF,MAAMC,WACN,4EAEDC,KAAKL,MAAMC,a,GAdQM,aCqDmCC,E,YAnC9D,aAAc,IAAD,8BACZ,+CAUDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACC,aAAaF,EAAMG,OAAOC,SAVzC,EAAKX,MAAM,CACVV,WAAW,GACXmB,aAAa,IAJF,E,iFAOQ,IAAD,OACjBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAC5EF,MAAK,SAAArB,GAAS,EAAKgB,SAAS,CAAElB,WAAYE,OAASwB,OAAM,kBAAIC,QAAQC,IAAI,2B,+BAKpE,IAAD,EACyBhB,KAAKF,MAA9BV,EADA,EACAA,WAAWmB,EADX,EACWA,aAEZU,EAAe7B,EAAW8B,QAAO,SAAAC,GACtC,OAAOA,EAA0B1B,QAAQZ,KAAKuC,cAAcC,SAASd,EAAaa,kBAEnF,OAAQhC,EAAWkC,OAClB,yBAAKxC,UAAU,MACd,wBAAIA,UAAU,OAAd,gBACA,2BAAOA,UAAU,sCAAsCyC,KAAK,SAASC,YAAY,qBAAqBC,SAAUzB,KAAKI,iBACrH,6BACA,6BACA,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUhB,WAAY6B,OARA,wBAAInC,UAAU,UAAd,8B,GArBVoB,aCNEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCJNC,IAASC,OAAmC,kBAAC,EAAD,MAAwBC,SAASC,eAAe,SDqHtF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.c6c3ce84.chunk.js","sourcesContent":["import React from 'react';\r\nconst Place=({id,street,city/*,destination,pakage,image*/})=>{\r\n\treturn(\r\n\t\t<div className ='bg-light-green dib tc br3 pa3 ma3 shadow-5 grow'>\r\n\t\t\t<img src={`https://source.unsplash.com/featured/${id+360}x${id+480}/?nature,travel`/*image*/} alt='' height='180' width='225' />\r\n\t\t\t<div>\r\n\t\t\t\t<p><strong>STREET: </strong>{street/*pakage*/}</p>\r\n\t\t\t\t<p><strong>CITY: </strong>{city/*destination*/}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Place;","import React from 'react';\r\nimport Place from './Place';\r\nconst Placeset=({placelists})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tplacelists.map((user,i)=>{\r\n\t\t\t\treturn <Place key={i} id={placelists[i].id} street/*destination*/={placelists[i].address.street/*destination*/} /*pakage={placelists[i].pakage}*/ /*image*/city={placelists[i].address.city/*image*/} />\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div> \r\n\t);\r\n}\r\nexport default Placeset;","import React from 'react';\r\nimport './Scroll.css'\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div id='scroll'>\r\n      \t\t{props.children}\r\n    \t</div>\r\n\t);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tErrorState:false\r\n\t\t}\r\n\t}\r\n\tcomponetDidCatch(){\r\n\t\tthis.setstate({ErrorState:true})\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.ErrorState){\r\n\t\t\treturn <h1>Oops Could not Load Contents.Try Again Later</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\n/*import {connect} from 'react-redux';*/\r\nimport Placeset from './Placeset';\r\n/*import {placelists}  from './Placelist';*/\r\nimport './App.css'\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary'\r\n/*import {setSearcheditem} from './actions.js'*/\r\n/*const mapStateToProps=(state)=>{\r\n\treturn{\r\n\t\tsearcheditem:state.searcheditem\r\n\t}\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n\treturn{\r\n\t\tonSearchChange:(event)=>dispatch(setSearcheditem(event.target.value))\r\n\t}\r\n}*/\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\tplacelists:[],\r\n\t\t\tsearcheditem:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=> response.json())\r\n    .then(user => {this.setState({ placelists: user})}).catch(()=>console.log(\"Error in FETCH URL\"));\r\n  \t}\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searcheditem:event.target.value});\r\n\t}\r\n\trender(){\r\n\t\tconst {placelists,searcheditem}=this.state;\r\n\t\t/*const{searcheditem,onSearchChange}=this.props;*/\r\n\t\tconst filteredplaces=placelists.filter(placelist=>{\r\n\t\t\treturn placelist/*.destination*/.address.city.toLowerCase().includes(searcheditem.toLowerCase());\r\n\t\t})\r\n\t\treturn !placelists.length?<h1 className='f-3 tc'>Loading Please Wait!!!</h1>:(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f-5'>Tour Gallary</h1>\r\n\t\t\t\t<input className='tc pa2 ba-1 b--gold bg-light-yellow' type='search' placeholder='Search Tour Places' onChange={this.onSearchChange} />\r\n\t\t\t\t<br/>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<Placeset placelists={filteredplaces} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default /*connect(mapStateToProps,mapDispatchToProps)(*/App/*)*/;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/*import {Provider} from 'react-redux';\nimport {createStore,applyMiddleware} from 'redux';\nimport {createLogger} from 'redux-logger';*/\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*import {searchPlaces} from './reducers.js';*/\nimport 'tachyons';\n\n/*const logger=createLogger();\nconst store=createStore(searchPlaces,applyMiddleware(logger))*/\n\nReactDOM.render(/*<Provider store={store}>*/<App />/*</Provider>*/, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}